# Generated by Django 3.1 on 2020-11-06 07:13

from collections import defaultdict

from django.db import migrations

LEVELS_MAPPING = {"one": 1, "two": 2, "three": 3}
TAG_MAPPING = {
    "BOLD": "b",
    "ITALIC": "i",
    "STRIKETHROUGH": "s",
    "CODE": "code",
}


def parse_to_editorjs(data):
    blocks = data["blocks"]
    entity_map = data["entityMap"]

    editor_js_blocks = []
    list_data = {}
    for block in blocks:
        key = block["type"]
        inline_style_ranges = block["inlineStyleRanges"]
        entity_ranges = block["entityRanges"]

        text = block["text"]
        text = parse_text(text, inline_style_ranges, entity_ranges, entity_map)

        type, data = get_block_data(text, key, list_data, editor_js_blocks)

        if not type:
            continue

        new_block = {
            "type": type,
            "data": data,
        }
        editor_js_blocks.append(new_block)

    return {"blocks": editor_js_blocks}


def parse_text(text, style_ranges, entity_ranges, entity_map):
    operations = defaultdict(list)
    prepare_operations(operations, style_ranges, entity_map, False)
    prepare_operations(operations, entity_ranges, entity_map, True)

    parsed_text = ""
    previous_index = 0
    for offset, tags in operations.items():
        end_index = offset + 1
        parsed_text += text[previous_index:end_index]
        parsed_text += "".join(tags)
        previous_index = offset + 1

    parsed_text += text[previous_index:]

    return parsed_text


def prepare_operations(operations, ranges, entity_map, entity):
    for range_date in ranges:
        tag = "a" if entity else TAG_MAPPING[range_date["style"]]
        offset = range_date["offset"]
        length = offset + range_date["length"] - 1
        if entity:
            entity_key = str(range_date["key"])
            href = entity_map[entity_key]["data"]["url"]
            start_tag = f'{tag} href="{href}"'
        else:
            start_tag = tag if tag != "code" else tag + ' class="inline-code"'
        operations[offset - 1].append(f"<{start_tag}>")
        operations[length] = [f"</{tag}>"] + operations[length]


def get_block_data(text, key, list_data, editor_js_blocks):
    if list_data and "list-item" not in key:
        list_block = {"type": "list", "data": list_data}
        editor_js_blocks.append(list_block)
        list_data = {}

    if "list-item" in key:
        style = key.split("-")[0]
        if list_data and list_data["style"] == style:
            list_data["items"].append(text)
        else:
            if list_data:
                list_block = {"type": "list", "data": list_data}
                editor_js_blocks.append(list_block)
            list_data = {"style": style, "items": [text]}
        return None, None

    data = {"text": text}
    if key.startswith("header"):
        level = LEVELS_MAPPING[key.split("-")[1]]
        type = "header"
        data["level"] = level
    elif key == "blockquote":
        type = "quote"
        data["alignment"] = "left"
    elif key == "code-block":
        type = "code"
    else:
        type = "paragraph"

    return type, data


def migrate_draftjs_to_editorjs_format(apps, schema_editor):
    Category = apps.get_model("product", "Category")
    CategoryTranslation = apps.get_model("product", "CategoryTranslation")
    Product = apps.get_model("product", "Product")
    ProductTranslation = apps.get_model("product", "ProductTranslation")
    Collection = apps.get_model("product", "Collection")
    CollectionTranslation = apps.get_model("product", "CollectionTranslation")

    for model in [
        Category,
        CategoryTranslation,
        Product,
        ProductTranslation,
        Collection,
        CollectionTranslation,
    ]:
        migrate_model_field_data(model)


def migrate_model_field_data(Model):
    instances = []
    for instance in Model.objects.all():
        if instance.description_json:
            instance.description_json = parse_to_editorjs(instance.description_json)
            instances.append(instance)

    Model.objects.bulk_update(instances, ["description_json"])


class Migration(migrations.Migration):

    dependencies = [
        ("product", "0129_add_product_types_and_attributes_perm"),
    ]

    operations = [
        migrations.RunPython(
            migrate_draftjs_to_editorjs_format, migrations.RunPython.noop
        )
    ]
